version: 1

sources:
  - name: raw
    database: "{{ env_var('DBT_GOOGLE_PROJECT_DEV') }}"
    schema: "{{ env_var('DBT_GOOGLE_BIGQUERY_DATASET_DEV') }}"

    tables:
      - name: raw_green_cab_data

models:
  - name: stg_bigquery__green_cab
    description: >
      This staging model contains raw data from NYC Green Taxi trips, imported from Google Cloud Storage. 
      It serves as an intermediary step in the ETL process, where the raw data is prepared and cleaned 
      before further transformation and analysis. This model includes essential trip details such as 
      pickup and dropoff times, fare amounts, and various surcharge fees. It is used to build the 
      final, transformed datasets in BigQuery for analysis and reporting.
    columns:
      - name: trip_id
        data_type: string
        description: >
          A unique surrogate key generated from VendorID, lpep_pickup_datetime, 
          and PULocationID. It uniquely identifies each trip in the dataset.
        data_tests:
          - not_null

      - name: vendor_id
        data_type: int64
        description: >
          A code indicating the LPEP provider that provided the record.
          1= Creative Mobile Technologies, LLC; 
          2= VeriFone Inc.
        data_tests:
          - not_null
          - accepted_values:
              values: [1,2]
              quote: false

      - name: vendor_description
        data_type: string
        description: >
          A code indicating the LPEP provider that provided the record.
          1= Creative Mobile Technologies, LLC; 
          2= VeriFone Inc.
        data_tests:
          - not_null
          - accepted_values:
              values: ['Creative Mobile Technologies, LLC', 'VeriFone Inc.']

      - name: ratecode_id
        data_type: int64
        description: >
          The final rate code in effect at the end of the trip.
          1= Standard rate
          2=JFK
          3=Newark
          4=Nassau or Westchester
          5=Negotiated fare
          6=Group ride
        data_tests:
          - accepted_values:
              values: [1,2,3,4,5,6]
              where: "ratecode_id IS NOT NULL"
              quote: false

      - name: ratecode_description
        data_type: string
        description: >
          The final rate code in effect at the end of the trip.
          1= Standard rate
          2=JFK
          3=Newark
          4=Nassau or Westchester
          5=Negotiated fare
          6=Group ride
        data_tests:
          - accepted_values:
              values: [
                'Standard rate',
                'JFK',
                'Newark',
                'Nassau or Westchester',
                'Negotiated Fare',
                'Group ride'
              ]
              where: "ratecode_description IS NOT NULL"

      - name: pickup_location_id
        data_type: int64
        description: TLC Taxi Zone in which the taximeter was engaged.

      - name: dropoff_location_id
        data_type: int64
        description: TLC Taxi Zone in which the taximeter was disengaged

      - name: pickup_datetime
        data_type: timestamp
        description: The date and time when the meter was engaged.

      - name: dropoff_datetime
        data_type: timestamp
        description: The date and time when the meter was disengaged.

      - name: trip_distance_in_miles
        data_type: float64
        description: ""
        data_tests:
          - dbt_utils.expression_is_true:
              expression: '> 0'
              config:
                where: 'trip_distance_in_miles IS NOT NULL'

      - name: trip_distance_in_km
        data_type: float64
        description: ""
        data_tests:
          - dbt_utils.expression_is_true:
              expression: '> 0'
              config:
                where: 'trip_distance_in_miles IS NOT NULL'

      - name: trip_duration_minutes
        data_type: int64
        description: ""

      - name: passenger_count
        data_type: int64
        description: >
          The number of passengers in the vehicle.
          This is a driver-entered value.
        data_tests:
          - dbt_utils.expression_is_true:
              expression: '>= 1'

      - name: record_stored_before_send
        data_type: boolean
        description: >
          This flag indicates whether the trip record was held in vehicle
          memory before sending to the vendor, aka “store and forward,”
          because the vehicle did not have a connection to the server.
          True= store and forward trip
          False= not a store and forward trip
        data_tests:
          - accepted_values:
              values: [true,false]
              quote: false

      - name: trip_type
        data_type: int64
        description: >
          A code indicating whether the trip was a street-hail or a dispatch
          that is automatically assigned based on the metered rate in use but
          can be altered by the driver.
          1= Street-hail
          2= Dispatch
        data_tests:
          - accepted_values:
              values: [1,2]
              quote: false

      - name: trip_type_description
        data_type: string
        description: >
          A code indicating whether the trip was a street-hail or a dispatch
          that is automatically assigned based on the metered rate in use but
          can be altered by the driver.
          1= Street-hail
          2= Dispatch
        data_tests:
          - accepted_values:
              values: ['Street-hail', 'Dispatch']

      - name: payment_type
        data_type: int64
        description: >
          A numeric code signifying how the passenger paid for the trip.
          1= Credit card
          2= Cash
          3= No charge
          4= Dispute
          5= Unknown
          6= Voided trip
        data_tests:
          - accepted_values:
              values: [1,2,3,4,5,6]
              quote: false

      - name: payment_type_description
        data_type: string
        description: >
          A numeric code signifying how the passenger paid for the trip.
          1= Credit card
          2= Cash
          3= No charge
          4= Dispute
          5= Unknown
          6= Voided trip
        data_tests:
          - accepted_values:
              values: [
                'Credit Card',
                'Cash',
                'No Charge',
                'Dispute',
                'Unknown',
                'Voided Trip'
              ]

      - name: fare_amount
        data_type: float64
        description: The time-and-distance fare calculated by the meter.
        data_tests:
          - dbt_utils.expression_is_true:
              expression: '> 0.0'

      - name: tip_amount
        data_type: float64
        description: >
          Tip amount. This field is automatically populated for credit card
          tips. Cash tips are not included.
        data_tests:
          - dbt_utils.expression_is_true:
              expression: '>= 0.0'

      - name: tolls_amount
        data_type: float64
        description: Total amount of all tolls paid in trip.
        data_tests:
          - dbt_utils.expression_is_true:
              expression: '>= 0.0'

      - name: extra_fee
        data_type: float64
        description: >
          Miscellaneous extras and surcharges. Currently, this only includes
          the $0.50 and $1 rush hour and overnight charges.
        data_tests:
          - dbt_utils.expression_is_true:
              expression: '>= 0.0'

      - name: ehail_fee
        data_type: float64
        description: >
          Fee charged for trips that were booked using an e-hail service 
          (e.g., a ride-hailing app). This fee is applicable only if the 
          trip was arranged through such a service.
        data_tests:
          - dbt_utils.expression_is_true:
              expression: '>= 0.0'

      - name: mta_tax
        data_type: float64
        description: >
          $0.50 MTA tax that is automatically triggered based on the metered
          rate in use.
        data_tests:
          - dbt_utils.expression_is_true:
              expression: '>= 0.0'

      - name: improvement_surcharge
        data_type: float64
        description: >
          $0.30 improvement surcharge assessed on hailed trips at the flag
          drop. The improvement surcharge began being levied in 2015.
        data_tests:
          - dbt_utils.expression_is_true:
              expression: '>= 0.0'

      - name: congestion_surcharge
        data_type: float64
        description: >
          An additional surcharge applied to the trip due to congestion pricing, 
          typically in specific areas of New York City, such as Manhattan, 
          during certain times of day.
        data_tests:
          - dbt_utils.expression_is_true:
              expression: '>= 0.0'

      - name: total_amount
        data_type: float64
        description: The total amount charged to passengers. Does not include cash tips.
        data_tests:
          - dbt_utils.expression_is_true:
              expression: '> 0.0'